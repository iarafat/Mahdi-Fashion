{"ast":null,"code":"import { useMemo } from 'react';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nvar apolloClient;\nconsole.log(process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT);\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: false,\n    link: new HttpLink({\n      uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT,\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials` or `headers`\n      onError: function onError(_ref) {\n        var networkError = _ref.networkError,\n            graphQLErrors = _ref.graphQLErrors;\n        console.log('graphQLErrors', graphQLErrors);\n        console.log('networkError', networkError);\n      }\n    }),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo() {\n  var _apolloClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (false) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  var store = useMemo(function () {\n    return initializeApollo(initialState);\n  }, [initialState]);\n  return store;\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/arafat/codes/pickbazar-template/packages/shop/src/features/payment/stripe-form.tsx\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { useMutation } from '@apollo/react-hooks';\nimport { closeModal } from '@redq/reuse-modal';\nimport { GET_PAYMENT } from 'graphql/mutation/order';\nimport StripeFormWrapper, { Heading, FieldWrapper } from './stripe-form.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nconst stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY);\n\nconst StripeForm = ({\n  buttonText,\n  getToken\n}) => {\n  // Get a reference to Stripe or Elements using hooks.\n  const stripe = useStripe();\n  const elements = useElements();\n  const {\n    dispatch\n  } = useContext(ProfileContext);\n\n  const handleSubmit = async () => {\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    } // Use elements.getElement to get a reference to the mounted Element.\n\n\n    const cardElement = elements.getElement(CardElement); // Pass the Element directly to other Stripe.js methods:\n    // e.g. createToken - https://stripe.com/docs/js/tokens_sources/create_token?type=cardElement\n\n    const {\n      token\n    } = await stripe.createToken(cardElement);\n    getToken(token);\n\n    if (token) {\n      dispatch({\n        type: 'ADD_CARD',\n        payload: token.card\n      });\n      closeModal();\n    }\n\n    console.log(token, 'token');\n  };\n\n  return __jsx(StripeFormWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Enter card info\"), __jsx(FieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, __jsx(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  })), __jsx(\"button\", {\n    type: \"button\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, buttonText ? buttonText : 'Pay Now'));\n};\n\nconst StripePaymentForm = ({\n  item: {\n    price,\n    buttonText\n  }\n}) => {\n  const [getPayment] = useMutation(GET_PAYMENT);\n\n  const sendTokenToServer = async token => {\n    const payment_info = await getPayment({\n      variables: {\n        paymentInput: JSON.stringify({\n          token,\n          amount: price\n        })\n      }\n    });\n    console.log(payment_info, 'payment_info');\n  };\n\n  return __jsx(Elements, {\n    stripe: stripePromise,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(StripeForm, {\n    getToken: token => sendTokenToServer(token),\n    buttonText: buttonText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default StripePaymentForm;","map":{"version":3,"sources":["/home/arafat/codes/pickbazar-template/packages/shop/src/features/payment/stripe-form.tsx"],"names":["React","useContext","loadStripe","Elements","CardElement","useStripe","useElements","useMutation","closeModal","GET_PAYMENT","StripeFormWrapper","Heading","FieldWrapper","ProfileContext","stripePromise","process","env","NEXT_PUBLIC_STRIPE_PUBLIC_KEY","StripeForm","buttonText","getToken","stripe","elements","dispatch","handleSubmit","cardElement","getElement","token","createToken","type","payload","card","console","log","StripePaymentForm","item","price","getPayment","sendTokenToServer","payment_info","variables","paymentInput","JSON","stringify","amount"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport {\n  Elements,\n  CardElement,\n  useStripe,\n  useElements,\n} from '@stripe/react-stripe-js';\nimport { useMutation } from '@apollo/react-hooks';\nimport { closeModal } from '@redq/reuse-modal';\nimport { GET_PAYMENT } from 'graphql/mutation/order';\nimport StripeFormWrapper, { Heading, FieldWrapper } from './stripe-form.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\n\nconst stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY);\n\nconst StripeForm = ({ buttonText, getToken }) => {\n  // Get a reference to Stripe or Elements using hooks.\n  const stripe = useStripe();\n  const elements = useElements();\n  const { dispatch } = useContext(ProfileContext);\n  const handleSubmit = async () => {\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n    // Use elements.getElement to get a reference to the mounted Element.\n    const cardElement = elements.getElement(CardElement);\n\n    // Pass the Element directly to other Stripe.js methods:\n    // e.g. createToken - https://stripe.com/docs/js/tokens_sources/create_token?type=cardElement\n    const { token } = await stripe.createToken(cardElement);\n    getToken(token);\n    if (token) {\n      dispatch({ type: 'ADD_CARD', payload: token.card });\n      closeModal();\n    }\n    console.log(token, 'token');\n  };\n  return (\n    <StripeFormWrapper>\n      <Heading>Enter card info</Heading>\n      <FieldWrapper>\n        <CardElement />\n      </FieldWrapper>\n      <button type=\"button\" onClick={handleSubmit}>\n        {buttonText ? buttonText : 'Pay Now'}\n      </button>\n    </StripeFormWrapper>\n  );\n};\ntype Item = {\n  item: {\n    price: any;\n    buttonText: string;\n  };\n};\nconst StripePaymentForm = ({ item: { price, buttonText } }: Item) => {\n  const [getPayment] = useMutation(GET_PAYMENT);\n  const sendTokenToServer = async (token: any) => {\n    const payment_info = await getPayment({\n      variables: { paymentInput: JSON.stringify({ token, amount: price }) },\n    });\n    console.log(payment_info, 'payment_info');\n  };\n\n  return (\n    <Elements stripe={stripePromise}>\n      <StripeForm\n        getToken={(token) => sendTokenToServer(token)}\n        buttonText={buttonText}\n      />\n    </Elements>\n  );\n};\n\nexport default StripePaymentForm;\n"]},"metadata":{},"sourceType":"module"}
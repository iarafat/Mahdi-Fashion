{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/arafat/codes/pickbazar-template/packages/shop/src/features/payment/stripe-form.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { useMutation } from '@apollo/react-hooks';\nimport { closeModal } from '@redq/reuse-modal';\nimport { GET_PAYMENT } from 'graphql/mutation/order';\nimport StripeFormWrapper, { Heading, FieldWrapper } from './stripe-form.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nvar stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY);\n\nvar StripeForm = function StripeForm(_ref) {\n  _s();\n\n  var buttonText = _ref.buttonText,\n      getToken = _ref.getToken;\n  // Get a reference to Stripe or Elements using hooks.\n  var stripe = useStripe();\n  var elements = useElements();\n\n  var _useContext = useContext(ProfileContext),\n      dispatch = _useContext.dispatch;\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var cardElement, _yield$stripe$createT, token;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!stripe || !elements)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              // Use elements.getElement to get a reference to the mounted Element.\n              cardElement = elements.getElement(CardElement); // Pass the Element directly to other Stripe.js methods:\n              // e.g. createToken - https://stripe.com/docs/js/tokens_sources/create_token?type=cardElement\n\n              _context.next = 5;\n              return stripe.createToken(cardElement);\n\n            case 5:\n              _yield$stripe$createT = _context.sent;\n              token = _yield$stripe$createT.token;\n              getToken(token);\n\n              if (token) {\n                dispatch({\n                  type: 'ADD_CARD',\n                  payload: token.card\n                });\n                closeModal();\n              }\n\n              console.log(token, 'token');\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(StripeFormWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Enter card info\"), __jsx(FieldWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, __jsx(CardElement, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  })), __jsx(\"button\", {\n    type: \"button\",\n    onClick: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, buttonText ? buttonText : 'Pay Now'));\n};\n\n_s(StripeForm, \"hP7OkFqHnQrhQR34UtZlvOXLI/k=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = StripeForm;\n\nvar StripePaymentForm = function StripePaymentForm(_ref3) {\n  _s2();\n\n  var _ref3$item = _ref3.item,\n      price = _ref3$item.price,\n      buttonText = _ref3$item.buttonText;\n\n  var _useMutation = useMutation(GET_PAYMENT),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      getPayment = _useMutation2[0];\n\n  var sendTokenToServer = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(token) {\n      var payment_info;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return getPayment({\n                variables: {\n                  paymentInput: JSON.stringify({\n                    token: token,\n                    amount: price\n                  })\n                }\n              });\n\n            case 2:\n              payment_info = _context2.sent;\n              console.log(payment_info, 'payment_info');\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function sendTokenToServer(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Elements, {\n    stripe: stripePromise,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(StripeForm, {\n    getToken: function getToken(token) {\n      return sendTokenToServer(token);\n    },\n    buttonText: buttonText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s2(StripePaymentForm, \"DXuXA7WQGwsLS5kVUt6Iwr7AMCo=\", false, function () {\n  return [useMutation];\n});\n\n_c2 = StripePaymentForm;\nexport default StripePaymentForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StripeForm\");\n$RefreshReg$(_c2, \"StripePaymentForm\");","map":{"version":3,"sources":["/home/arafat/codes/pickbazar-template/packages/shop/src/features/payment/stripe-form.tsx"],"names":["React","useContext","loadStripe","Elements","CardElement","useStripe","useElements","useMutation","closeModal","GET_PAYMENT","StripeFormWrapper","Heading","FieldWrapper","ProfileContext","stripePromise","process","env","NEXT_PUBLIC_STRIPE_PUBLIC_KEY","StripeForm","buttonText","getToken","stripe","elements","dispatch","handleSubmit","cardElement","getElement","createToken","token","type","payload","card","console","log","StripePaymentForm","item","price","getPayment","sendTokenToServer","variables","paymentInput","JSON","stringify","amount","payment_info"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport {\n  Elements,\n  CardElement,\n  useStripe,\n  useElements,\n} from '@stripe/react-stripe-js';\nimport { useMutation } from '@apollo/react-hooks';\nimport { closeModal } from '@redq/reuse-modal';\nimport { GET_PAYMENT } from 'graphql/mutation/order';\nimport StripeFormWrapper, { Heading, FieldWrapper } from './stripe-form.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\n\nconst stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY);\n\nconst StripeForm = ({ buttonText, getToken }) => {\n  // Get a reference to Stripe or Elements using hooks.\n  const stripe = useStripe();\n  const elements = useElements();\n  const { dispatch } = useContext(ProfileContext);\n  const handleSubmit = async () => {\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n    // Use elements.getElement to get a reference to the mounted Element.\n    const cardElement = elements.getElement(CardElement);\n\n    // Pass the Element directly to other Stripe.js methods:\n    // e.g. createToken - https://stripe.com/docs/js/tokens_sources/create_token?type=cardElement\n    const { token } = await stripe.createToken(cardElement);\n    getToken(token);\n    if (token) {\n      dispatch({ type: 'ADD_CARD', payload: token.card });\n      closeModal();\n    }\n    console.log(token, 'token');\n  };\n  return (\n    <StripeFormWrapper>\n      <Heading>Enter card info</Heading>\n      <FieldWrapper>\n        <CardElement />\n      </FieldWrapper>\n      <button type=\"button\" onClick={handleSubmit}>\n        {buttonText ? buttonText : 'Pay Now'}\n      </button>\n    </StripeFormWrapper>\n  );\n};\ntype Item = {\n  item: {\n    price: any;\n    buttonText: string;\n  };\n};\nconst StripePaymentForm = ({ item: { price, buttonText } }: Item) => {\n  const [getPayment] = useMutation(GET_PAYMENT);\n  const sendTokenToServer = async (token: any) => {\n    const payment_info = await getPayment({\n      variables: { paymentInput: JSON.stringify({ token, amount: price }) },\n    });\n    console.log(payment_info, 'payment_info');\n  };\n\n  return (\n    <Elements stripe={stripePromise}>\n      <StripeForm\n        getToken={(token) => sendTokenToServer(token)}\n        buttonText={buttonText}\n      />\n    </Elements>\n  );\n};\n\nexport default StripePaymentForm;\n"]},"metadata":{},"sourceType":"module"}
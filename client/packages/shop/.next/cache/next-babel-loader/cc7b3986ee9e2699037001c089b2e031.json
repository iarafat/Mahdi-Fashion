{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport FoodCard from 'components/product-card/product-card-four/product-card-four';\nimport { ProductsRow, ProductsCol, ButtonWrapper, LoaderWrapper, LoaderItem, ProductCardWrapper } from '../product-list/product-list.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Button } from 'components/button/button';\nimport Placeholder from 'components/placeholder/placeholder';\nimport Fade from 'react-reveal/Fade';\nimport NoResultFound from 'components/no-result/no-result';\nimport { customerDistance } from 'utils/customerDistance';\nimport { formatTime } from 'utils/formatTime';\nimport { FormattedMessage } from 'react-intl';\nimport { GET_VENDORS } from 'graphql/query/vendors.query';\nexport var Products = function Products(_ref) {\n  var _data$vendors;\n\n  var deviceType = _ref.deviceType,\n      type = _ref.type,\n      _ref$fetchLimit = _ref.fetchLimit,\n      fetchLimit = _ref$fetchLimit === void 0 ? 8 : _ref$fetchLimit,\n      _ref$loadMore = _ref.loadMore,\n      loadMore = _ref$loadMore === void 0 ? true : _ref$loadMore;\n  var router = useRouter();\n\n  var _useState = useState(false),\n      loadingMore = _useState[0],\n      toggleLoading = _useState[1];\n\n  var _useQuery = useQuery(GET_VENDORS, {\n    variables: {\n      type: type,\n      text: router.query.text,\n      category: router.query.category,\n      offset: 0,\n      limit: fetchLimit\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore;\n\n  if (loading) {\n    return __jsx(LoaderWrapper, null, __jsx(LoaderItem, null, __jsx(Placeholder, {\n      uniqueKey: \"1\"\n    })), __jsx(LoaderItem, null, __jsx(Placeholder, {\n      uniqueKey: \"2\"\n    })), __jsx(LoaderItem, null, __jsx(Placeholder, {\n      uniqueKey: \"3\"\n    })));\n  }\n\n  if (error) return __jsx(\"div\", null, error.message);\n\n  if (!data || !data.vendors || data.vendors.items.length === 0) {\n    return __jsx(NoResultFound, null);\n  }\n\n  var handleLoadMore = function handleLoadMore() {\n    toggleLoading(true);\n    fetchMore({\n      variables: {\n        offset: Number(data.vendors.items.length),\n        limit: fetchLimit\n      },\n      updateQuery: function updateQuery(prev, _ref2) {\n        var fetchMoreResult = _ref2.fetchMoreResult;\n        toggleLoading(false);\n\n        if (!fetchMoreResult) {\n          return prev;\n        }\n\n        return {\n          vendors: {\n            __typename: prev.vendors.__typename,\n            items: [].concat(_toConsumableArray(prev.vendors.items), _toConsumableArray(fetchMoreResult.vendors.items)),\n            totalCount: fetchMoreResult.vendors.totalCount,\n            hasMore: fetchMoreResult.vendors.hasMore\n          }\n        };\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(ProductsRow, null, data === null || data === void 0 ? void 0 : (_data$vendors = data.vendors) === null || _data$vendors === void 0 ? void 0 : _data$vendors.items.map(function (item, index) {\n    return __jsx(ProductsCol, {\n      key: index,\n      className: \"food-col\"\n    }, __jsx(ProductCardWrapper, null, __jsx(Fade, {\n      duration: 800,\n      delay: index * 10,\n      style: {\n        height: '100%'\n      }\n    }, __jsx(FoodCard, {\n      name: item.name,\n      image: item.thumbnailUrl,\n      restaurantType: item === null || item === void 0 ? void 0 : item.categories.join(', '),\n      duration: formatTime(customerDistance()),\n      delivery: item.deliveryDetails.charge,\n      isFree: item.deliveryDetails.isFree,\n      discountInPercent: item.promotion,\n      data: item,\n      onClick: function onClick() {\n        return router.push('/restaurant/[slug]', \"/restaurant/\".concat(item.slug));\n      }\n    }))));\n  })), loadMore && data.vendors.hasMore && __jsx(ButtonWrapper, null, __jsx(Button, {\n    onClick: handleLoadMore,\n    loading: loadingMore,\n    variant: \"secondary\" // title=\"Load More\"\n    // intlButtonId=\"loadMoreBtn\"\n    // size=\"small\"\n    // isLoading={loadingMore}\n    // loader={<Loader color=\"#009E7F\" />}\n    // style={{\n    //   minWidth: 135,\n    //   backgroundColor: '#ffffff',\n    ,\n    border: \"1px solid #f1f1f1\" //   color: '#009E7F',\n    // }}\n\n  }, __jsx(FormattedMessage, {\n    id: \"loadMoreButton\",\n    defaultMessage: \"Load More\"\n  }))));\n};\nexport default Products;","map":null,"metadata":{},"sourceType":"module"}
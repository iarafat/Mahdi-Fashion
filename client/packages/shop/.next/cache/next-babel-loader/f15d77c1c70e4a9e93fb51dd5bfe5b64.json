{"ast":null,"code":"var _jsxFileName = \"/home/arafat/codes/pickbazar/client/packages/shop/src/components/tree-menu/tree-menu.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { usePrevious, useMeasure } from 'utils/hooks';\nimport { useSpring, animated } from 'react-spring';\nimport { Frame, Title, Content, Header, IconWrapper } from './tree-menu.style';\nimport * as Icons from 'assets/icons/category-icons';\nconsole.log(Icons);\nconst Tree = React.memo(({\n  children,\n  name,\n  icon,\n  isOpen,\n  onClick,\n  depth,\n  defaultOpen = false\n}) => {\n  const previous = usePrevious(isOpen);\n  const [bind, {\n    height: viewHeight\n  }] = useMeasure();\n  const {\n    height,\n    opacity,\n    transform\n  } = useSpring({\n    from: {\n      height: 0,\n      opacity: 0,\n      transform: 'translate3d(20px,0,0)'\n    },\n    to: {\n      height: isOpen ? viewHeight : 0,\n      opacity: isOpen ? 1 : 0,\n      transform: `translate3d(${isOpen ? 0 : 20}px,0,0)`\n    }\n  });\n  const Icon = icon ? Icons[icon] : depth === 'child' ? Icons['Minus'] : null;\n  console.log(depth);\n  return __jsx(Frame, {\n    depth: depth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, __jsx(Header, {\n    open: isOpen,\n    depth: depth,\n    className: depth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, Icon !== null && __jsx(IconWrapper, {\n    depth: depth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, __jsx(Icon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }\n  })), __jsx(Title, {\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, name)), __jsx(Content, {\n    style: {\n      opacity,\n      height: isOpen && previous === isOpen ? 'auto' : height\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, __jsx(animated.div, _extends({\n    style: {\n      transform\n    }\n  }, bind, {\n    children: children,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }))));\n});\nexport const TreeMenu = ({\n  data,\n  className,\n  onClick,\n  active\n}) => {\n  const handler = children => {\n    return children.map(subOption => {\n      if (!subOption.children) {\n        return __jsx(Tree, {\n          key: subOption.name,\n          name: subOption.name,\n          icon: subOption.icon,\n          depth: \"child\",\n          onClick: () => onClick(subOption.slug),\n          isOpen: active === subOption.slug,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }\n        });\n      }\n\n      return __jsx(Tree, {\n        key: subOption.name,\n        name: subOption.name,\n        icon: subOption.icon,\n        depth: \"parent\",\n        onClick: () => onClick(subOption.slug),\n        isOpen: active === subOption.slug || subOption.children.some(item => item.slug === active),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }\n      }, handler(subOption.children));\n    });\n  };\n\n  return __jsx(React.Fragment, null, handler(data));\n};","map":{"version":3,"sources":["/home/arafat/codes/pickbazar/client/packages/shop/src/components/tree-menu/tree-menu.tsx"],"names":["React","usePrevious","useMeasure","useSpring","animated","Frame","Title","Content","Header","IconWrapper","Icons","console","log","Tree","memo","children","name","icon","isOpen","onClick","depth","defaultOpen","previous","bind","height","viewHeight","opacity","transform","from","to","Icon","TreeMenu","data","className","active","handler","map","subOption","slug","some","item"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { usePrevious, useMeasure } from 'utils/hooks';\nimport { useSpring, animated } from 'react-spring';\nimport { Frame, Title, Content, Header, IconWrapper } from './tree-menu.style';\n\nimport * as Icons from 'assets/icons/category-icons';\n\nconsole.log(Icons)\n\nconst Tree = React.memo(\n  ({\n    children,\n    name,\n    icon,\n    isOpen,\n    onClick,\n    depth,\n    defaultOpen = false,\n  }: any) => {\n    const previous = usePrevious(isOpen);\n    const [bind, { height: viewHeight }] = useMeasure();\n    const { height, opacity, transform } = useSpring<any>({\n      from: { height: 0, opacity: 0, transform: 'translate3d(20px,0,0)' },\n      to: {\n        height: isOpen ? viewHeight : 0,\n        opacity: isOpen ? 1 : 0,\n        transform: `translate3d(${isOpen ? 0 : 20}px,0,0)`,\n      },\n    });\n    const Icon = icon ? Icons[icon] : depth === 'child' ? Icons['Minus'] : null;\n    console.log(depth)\n    return (\n      <Frame depth={depth}>\n        <Header open={isOpen} depth={depth} className={depth}>\n          {Icon !== null && (\n            <IconWrapper depth={depth}>\n              <Icon />\n            </IconWrapper>\n          )}\n          <Title onClick={onClick}>{name}</Title>\n        </Header>\n        <Content\n          style={{\n            opacity,\n            height: isOpen && previous === isOpen ? 'auto' : height,\n          }}\n        >\n          <animated.div style={{ transform }} {...bind} children={children} />\n        </Content>\n      </Frame>\n    );\n  }\n);\n\ntype Props = {\n  className?: any;\n  data: any;\n  onClick: (slug: string) => void;\n  active: string | string[];\n};\nexport const TreeMenu: React.FC<Props> = ({\n  data,\n  className,\n  onClick,\n  active,\n}) => {\n  const handler = (children) => {\n      return children.map((subOption) => {\n        if (!subOption.children) {\n          return (\n            <Tree\n              key={subOption.name}\n              name={subOption.name}\n              icon={subOption.icon}\n              depth=\"child\"\n              onClick={() => onClick(subOption.slug)}\n              isOpen={active === subOption.slug}\n            />\n          );\n        }\n        return (\n          <Tree\n            key={subOption.name}\n            name={subOption.name}\n            icon={subOption.icon}\n            depth=\"parent\"\n            onClick={() => onClick(subOption.slug)}\n            isOpen={\n              active === subOption.slug ||\n              subOption.children.some((item) => item.slug === active)\n            }\n          >\n            {handler(subOption.children)}\n          </Tree>\n        );\n      });\n  };\n  return <>{handler(data)}</>;\n};\n"]},"metadata":{},"sourceType":"module"}
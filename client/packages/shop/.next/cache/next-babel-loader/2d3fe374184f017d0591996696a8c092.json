{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nvar apolloClient;\nconsole.log(process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT);\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: false,\n    link: new HttpLink({\n      uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT,\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials` or `headers`\n      onError: function onError(_ref) {\n        var networkError = _ref.networkError,\n            graphQLErrors = _ref.graphQLErrors;\n        console.log('graphQLErrors', graphQLErrors);\n        console.log('networkError', networkError);\n      }\n    }),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo() {\n  var _apolloClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (false) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeApollo(initialState);\n  }, [initialState]);\n  return store;\n}\n\n_s(useApollo, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/home/arafat/codes/pickbazar/client/packages/shop/src/utils/apollo.js"],"names":["useMemo","ApolloClient","InMemoryCache","HttpLink","apolloClient","console","log","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","createApolloClient","ssrMode","link","uri","credentials","onError","networkError","graphQLErrors","cache","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,IAAIC,YAAJ;AACAC,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,gCAAxB;;AACA,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIT,YAAJ,CAAiB;AACtBU,IAAAA,OAAO,OADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIT,QAAJ,CAAa;AACjBU,MAAAA,GAAG,EAAEN,OAAO,CAACC,GAAR,CAAYC,gCADA;AACkC;AACnDK,MAAAA,WAAW,EAAE,aAFI;AAEW;AAC5BC,MAAAA,OAAO,EAAE,uBAAqC;AAAA,YAAlCC,YAAkC,QAAlCA,YAAkC;AAAA,YAApBC,aAAoB,QAApBA,aAAoB;AAC5CZ,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BW,aAA7B;AACAZ,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BU,YAA5B;AACD;AANgB,KAAb,CAFgB;AAUtBE,IAAAA,KAAK,EAAE,IAAIhB,aAAJ;AAVe,GAAjB,CAAP;AAYD;;AAED,OAAO,SAASiB,gBAAT,GAA+C;AAAA;;AAAA,MAArBC,YAAqB,uEAAN,IAAM;;AACpD,MAAMC,aAAa,qBAAGjB,YAAH,2DAAmBM,kBAAkB,EAAxD,CADoD,CAGpD;AACA;;;AACA,MAAIU,YAAJ,EAAkB;AAChBC,IAAAA,aAAa,CAACH,KAAd,CAAoBI,OAApB,CAA4BF,YAA5B;AACD,GAPmD,CAQpD;;;AACA,aAAmC,OAAOC,aAAP,CATiB,CAUpD;;AACA,MAAI,CAACjB,YAAL,EAAmBA,YAAY,GAAGiB,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAiC;AAAA;;AACtC,MAAMI,KAAK,GAAGxB,OAAO,CAAC;AAAA,WAAMmB,gBAAgB,CAACC,YAAD,CAAtB;AAAA,GAAD,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACD;;GAHeD,S","sourcesContent":["import { useMemo } from 'react';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nlet apolloClient;\nconsole.log(process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT);\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: new HttpLink({\n      uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT, // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n      onError: ({ networkError, graphQLErrors }) => {\n        console.log('graphQLErrors', graphQLErrors);\n        console.log('networkError', networkError);\n      },\n    }),\n    cache: new InMemoryCache(),\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/arafat/codes/pickbazar/client/packages/shop/src/layouts/app-layout.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport Sticky from 'react-stickynode';\nimport { useAppState } from 'contexts/app/app.provider';\nimport Header from './header/header';\nimport { LayoutWrapper } from './layout.style';\nimport { isCategoryPage } from './is-home-page';\nvar MobileHeader = dynamic(_c = function _c() {\n  return import('./header/mobile-header');\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./header/mobile-header')];\n    },\n    modules: ['./header/mobile-header']\n  }\n});\n_c2 = MobileHeader;\n\nvar Layout = function Layout(_ref) {\n  _s();\n\n  var className = _ref.className,\n      children = _ref.children,\n      token = _ref.token;\n\n  var _useState = useState([]),\n      typeMenu = _useState[0],\n      setTypeMenu = _useState[1];\n\n  var _useState2 = useState(true),\n      isHome = _useState2[0],\n      setHome = _useState2[1];\n\n  var isSticky = useAppState('isSticky');\n\n  var _useRouter = useRouter(),\n      pathname = _useRouter.pathname,\n      query = _useRouter.query;\n\n  var type = pathname === '/restaurant' ? 'restaurant' : query.type;\n  var isHomePage = isCategoryPage(type);\n  /*const newTypeArry = [];\n  const { data, error, loading } = useQuery(\n    GET_TYPE,\n    {\n      variables: {\n        searchText: ''\n      }\n    }\n  );\n  \n  useEffect(() => {\n   \n    return;\n  }, []);\n  \n  if (loading) {\n    return <ErrorMessage message={'Loading...'} />\n  };\n   if (error) {\n    return (\n      <ErrorMessage message={error.message} />\n    );\n  };\n   if(data){\n    data.types.items.map((item: any, index: any) => {\n      newTypeArry.push(item.href)\n    })\n    if(newTypeArry.includes(`/${type}`)){\n      setHome(true)\n    }else{\n      setHome(false)\n    }  \n  }  */\n\n  return __jsx(LayoutWrapper, {\n    className: \"layoutWrapper \".concat(className),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, __jsx(Sticky, {\n    enabled: isSticky,\n    innerZ: 1001,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, __jsx(MobileHeader, {\n    className: \"\".concat(isSticky ? 'sticky' : 'unSticky', \" \").concat(isHomePage ? 'home' : '', \" desktop\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), __jsx(Header, {\n    className: \"\".concat(isSticky && isHomePage ? 'sticky' : 'unSticky', \" \").concat(isHomePage ? 'home' : ''),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  })), children);\n};\n\n_s(Layout, \"GyredJGVBQdlukQjGRGt74Snvwk=\", false, function () {\n  return [useAppState, useRouter];\n});\n\n_c3 = Layout;\nexport default Layout;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MobileHeader$dynamic\");\n$RefreshReg$(_c2, \"MobileHeader\");\n$RefreshReg$(_c3, \"Layout\");","map":{"version":3,"sources":["/home/arafat/codes/pickbazar/client/packages/shop/src/layouts/app-layout.tsx"],"names":["React","useState","dynamic","useRouter","Sticky","useAppState","Header","LayoutWrapper","isCategoryPage","MobileHeader","ssr","Layout","className","children","token","typeMenu","setTypeMenu","isHome","setHome","isSticky","pathname","query","type","isHomePage"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,cAAT,QAA+B,gBAA/B;AAIA,IAAMC,YAAY,GAAGP,OAAO,MAAC;AAAA,SAAM,OAAO,wBAAP,CAAN;AAAA,CAAD,EAAyC;AACnEQ,EAAAA,GAAG,EAAE,KAD8D;AAAA;AAAA;AAAA,kCAA3B,wBAA2B;AAAA;AAAA,cAA3B,wBAA2B;AAAA;AAAA,CAAzC,CAA5B;MAAMD,Y;;AASN,IAAME,MAA4C,GAAG,SAA/CA,MAA+C,OAK/C;AAAA;;AAAA,MAJJC,SAII,QAJJA,SAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MADJC,KACI,QADJA,KACI;;AAAA,kBAC4Bb,QAAQ,CAAC,EAAD,CADpC;AAAA,MACGc,QADH;AAAA,MACaC,WADb;;AAAA,mBAEsBf,QAAQ,CAAC,IAAD,CAF9B;AAAA,MAEGgB,MAFH;AAAA,MAEWC,OAFX;;AAIJ,MAAMC,QAAQ,GAAGd,WAAW,CAAC,UAAD,CAA5B;;AAJI,mBAKwBF,SAAS,EALjC;AAAA,MAKIiB,QALJ,cAKIA,QALJ;AAAA,MAKcC,KALd,cAKcA,KALd;;AAMJ,MAAMC,IAAI,GAAGF,QAAQ,KAAK,aAAb,GAA6B,YAA7B,GAA4CC,KAAK,CAACC,IAA/D;AACA,MAAMC,UAAU,GAAGf,cAAc,CAACc,IAAD,CAAjC;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASE,SACE,MAAC,aAAD;AAAe,IAAA,SAAS,0BAAmBV,SAAnB,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEO,QAAjB;AAA2B,IAAA,MAAM,EAAE,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AACE,IAAA,SAAS,YAAKA,QAAQ,GAAG,QAAH,GAAc,UAA3B,cACPI,UAAU,GAAG,MAAH,GAAY,EADf,aADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE,MAAC,MAAD;AACE,IAAA,SAAS,YAAKJ,QAAQ,IAAII,UAAZ,GAAyB,QAAzB,GAAoC,UAAzC,cACPA,UAAU,GAAG,MAAH,GAAY,EADf,CADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,EAcGV,QAdH,CADF;AAkBD,CAxED;;GAAMF,M;UASaN,W,EACWF,S;;;MAVxBQ,M;AA0EN,eAAeA,MAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport Sticky from 'react-stickynode';\nimport { useAppState } from 'contexts/app/app.provider';\nimport Header from './header/header';\nimport { LayoutWrapper } from './layout.style';\nimport { isCategoryPage } from './is-home-page';\nimport { GET_TYPE } from 'graphql/query/type.query';\nimport { array } from 'yup';\nimport ErrorMessage from 'components/error-message/error-message';\nconst MobileHeader = dynamic(() => import('./header/mobile-header'), {\n  ssr: false,\n});\n\ntype LayoutProps = {\n  className?: string;\n  token?: string;\n};\n\nconst Layout: React.FunctionComponent<LayoutProps> = ({\n  className,\n  children,\n  // deviceType: { mobile, tablet, desktop },\n  token,\n}) => {\n  const [typeMenu, setTypeMenu] = useState([]);\n  const [isHome, setHome] = useState(true);\n\n  const isSticky = useAppState('isSticky');\n  const { pathname, query } = useRouter();\n  const type = pathname === '/restaurant' ? 'restaurant' : query.type;\n  const isHomePage = isCategoryPage(type);\n  /*const newTypeArry = [];\n  const { data, error, loading } = useQuery(\n    GET_TYPE,\n    {\n      variables: {\n        searchText: ''\n      }\n    }\n  );\n\n\n\n\n useEffect(() => {\n   \n    return;\n  }, []);\n \n\n  if (loading) {\n    return <ErrorMessage message={'Loading...'} />\n  };\n\n  if (error) {\n    return (\n      <ErrorMessage message={error.message} />\n    );\n  };\n\n  if(data){\n    data.types.items.map((item: any, index: any) => {\n      newTypeArry.push(item.href)\n    })\n    if(newTypeArry.includes(`/${type}`)){\n      setHome(true)\n    }else{\n      setHome(false)\n    }  \n  }  */\n\n \n  return (\n    <LayoutWrapper className={`layoutWrapper ${className}`}>\n      <Sticky enabled={isSticky} innerZ={1001}>\n        <MobileHeader\n          className={`${isSticky ? 'sticky' : 'unSticky'} ${\n            isHomePage ? 'home' : ''\n          } desktop`}\n        />\n\n        <Header\n          className={`${isSticky && isHomePage ? 'sticky' : 'unSticky'} ${\n            isHomePage ? 'home' : ''\n          }`}\n        />\n      </Sticky>\n      {children}\n    </LayoutWrapper>\n  );\n};\n\nexport default Layout;\n"]},"metadata":{},"sourceType":"module"}
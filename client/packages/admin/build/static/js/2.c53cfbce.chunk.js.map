{"version":3,"sources":["../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../../../node_modules/baseui/esm/table/styled-components.js","../../../node_modules/baseui/esm/table-grid/styled-components.js","../../src/data/OperationData.ts","../../src/data/QueryData.ts","../../src/utils/useBaseQuery.ts","../../src/utils/useDeepMemo.ts","../../src/useQuery.ts","../../src/data/MutationData.ts","../../src/useMutation.ts","../../src/data/SubscriptionData.ts","../../src/ssr/RenderPromises.ts"],"names":["_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperty","obj","configurable","writable","StyledTableElement","styled","_ref","$theme","expandBorderStyles","borders","border300","backgroundColor","colors","tableBackground","borderTopLeftRadius","radius200","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","display","flexDirection","height","overflowX","displayName","StyledTable","withWrapper","StyledComponent","props","React","role","StyledHeadElement","_ref2","$width","tableHeadBackgroundColor","boxShadow","lighting","shadow400","flexGrow","width","StyledHeadCellElement","_ref3","$cursor","borderDir","direction","typography","font350","borderTopStyle","borderBottomStyle","borderLeftStyle","color","contentPrimary","justifyContent","paddingTop","sizing","scale500","paddingRight","scale600","paddingBottom","paddingLeft","cursor","StyledHeadCell","_ref4","font250","alignItems","borderRightStyle","padding","mono500","StyledBodyElement","_ref5","overflowY","flex","StyledRowElement","StyledCellElement","_ref6","$striped","font200","tableStripedBackground","scale300","StyledCell","$disabled","$active","tableFilter","_ref7","tableFilterBackground","maxHeight","overflow","_ref8","tableFilterHeading","_ref9","tableFilterFooterBackground","scale100","minWidth","_ref10","primary","marginRight","marginLeft","withStyle","FlexStyledTable","gridTemplateColumns","$gridTemplateColumns","FlexStyledHeadCell","_ref$$sticky","$sticky","$isFocusVisible","position","top","outline","concat","accent","outlineOffset","StyledBodyCell","FlexStyledBodyCell","gridColumn","$gridColumn","gridRow","$gridRow","options","context","isMounted","previousOptions","getOptions","setOptions","newOptions","storePrevious","isEqual","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","type","operation","onNewData","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","result","getQueryResult","startQuerySubscription","obsRefetch","variables","query","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","loading","networkStatus","ready","called","data","undefined","fetchData","ssr","obs","getCurrentResult","afterExecute","lazy","handleErrorOrCompleted","bind","ssrInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","Query","fetchPolicy","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","subscription","obsQuery","subscribe","next","previousResult","error","resubscribeToQuery","lastError","getLastError","lastResult","getLastResult","resetLastResults","currentResult","partial","errors","graphQLErrors","partialRefetch","resetQueryStoreErrors","onCompleted","onError","unsubscribe","OperationData","useBaseQuery","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","QueryData","Promise","resolve","then","memoFn","ref","useDeepMemo","queryResult","useQuery","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","update","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","mutationContext","ignoreResults","updateResult","isMostRecentMutation","useMutation","mutationDataRef","mutationData","MutationData","initialize","getLoadingResult","shouldResubscribe","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","queryPromises","Map","queryInfoTrie","observable","lookupQueryInfo","queryInstance","finish","seen","set","hasPromises","size","consumeAndAwaitPromises","promises","promise","clear","all","varMap","get","has","variablesString","JSON","stringify","info"],"mappings":"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","file":"static/js/2.c53cfbce.chunk.js","sourcesContent":["export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\nCopyright (c) 2018-2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\nimport * as React from 'react';\nimport { styled, withWrapper, expandBorderStyles } from '../styles/index.js';\nvar StyledTableElement = styled('div', function (_ref) {\n  var $theme = _ref.$theme;\n  return _objectSpread({}, expandBorderStyles($theme.borders.border300), {\n    backgroundColor: $theme.colors.tableBackground,\n    borderTopLeftRadius: $theme.borders.radius200,\n    borderTopRightRadius: $theme.borders.radius200,\n    borderBottomRightRadius: $theme.borders.radius200,\n    borderBottomLeftRadius: $theme.borders.radius200,\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    overflowX: 'auto'\n  });\n});\nStyledTableElement.displayName = \"StyledTableElement\";\nexport var StyledTable = withWrapper(StyledTableElement, function (StyledComponent) {\n  return function StyledTable(props) {\n    return React.createElement(StyledComponent, _extends({\n      \"data-baseweb\": \"table-custom\",\n      role: \"grid\"\n    }, props));\n  };\n});\nvar StyledHeadElement = styled('div', function (_ref2) {\n  var $theme = _ref2.$theme,\n      $width = _ref2.$width;\n  return {\n    backgroundColor: $theme.colors.tableHeadBackgroundColor,\n    boxShadow: $theme.lighting.shadow400,\n    display: 'flex',\n    flexGrow: 0,\n    width: $width ? $width : '100%'\n  };\n});\nStyledHeadElement.displayName = \"StyledHeadElement\";\nexport var StyledHead = withWrapper(StyledHeadElement, function (StyledComponent) {\n  return function StyledHead(props) {\n    return React.createElement(StyledComponent, _extends({\n      role: \"row\"\n    }, props));\n  };\n});\nvar StyledHeadCellElement = styled('div', function (_ref3) {\n  var $theme = _ref3.$theme,\n      $cursor = _ref3.$cursor;\n  var borderDir = $theme.direction === 'rtl' ? 'borderLeft' : 'borderRight';\n  return _objectSpread({}, $theme.typography.font350, {}, expandBorderStyles($theme.borders.border300), {\n    borderTopStyle: 'none',\n    borderBottomStyle: 'none',\n    borderLeftStyle: 'none',\n    color: $theme.colors.contentPrimary,\n    display: 'flex',\n    justifyContent: 'space-between',\n    paddingTop: $theme.sizing.scale500,\n    paddingRight: $theme.sizing.scale600,\n    paddingBottom: $theme.sizing.scale500,\n    paddingLeft: $theme.sizing.scale600,\n    cursor: $cursor ? $cursor : 'inherit',\n    width: '100%',\n    ':last-of-type': _defineProperty({}, borderDir, 'none')\n  });\n});\nStyledHeadCellElement.displayName = \"StyledHeadCellElement\";\nexport var StyledHeadCell = withWrapper(StyledHeadCellElement, function (StyledComponent) {\n  return function StyledHeadCell(props) {\n    return React.createElement(StyledComponent, _extends({\n      role: \"columnheader\"\n    }, props));\n  };\n});\nexport var StyledSortableLabel = styled('button', function (_ref4) {\n  var $theme = _ref4.$theme;\n  return _objectSpread({}, $theme.typography.font250, {\n    alignItems: 'center',\n    backgroundColor: 'transparent',\n    borderLeftStyle: 'none',\n    borderTopStyle: 'none',\n    borderRightStyle: 'none',\n    borderBottomStyle: 'none',\n    color: $theme.colors.contentPrimary,\n    display: 'flex',\n    padding: 0,\n    ':hover:enabled': {\n      cursor: 'pointer'\n    },\n    ':disabled': {\n      color: $theme.colors.mono500\n    }\n  });\n});\nStyledSortableLabel.displayName = \"StyledSortableLabel\";\nvar StyledBodyElement = styled('div', function (_ref5) {\n  var $width = _ref5.$width;\n  return {\n    width: $width ? $width : '100%',\n    overflowX: 'hidden',\n    overflowY: 'overlay',\n    flex: 1\n  };\n});\nStyledBodyElement.displayName = \"StyledBodyElement\";\nexport var StyledBody = withWrapper(StyledBodyElement, function (StyledComponent) {\n  return function StyledBody(props) {\n    return React.createElement(StyledComponent, _extends({\n      role: \"rowgroup\"\n    }, props));\n  };\n});\nvar StyledRowElement = styled('div', {\n  display: 'flex',\n  alignItems: 'center'\n});\nStyledRowElement.displayName = \"StyledRowElement\";\nexport var StyledRow = withWrapper(StyledRowElement, function (StyledComponent) {\n  return function StyledRow(props) {\n    return React.createElement(StyledComponent, _extends({\n      role: \"row\"\n    }, props));\n  };\n});\nvar StyledCellElement = styled('div', function (_ref6) {\n  var $theme = _ref6.$theme,\n      $striped = _ref6.$striped;\n  return _objectSpread({}, $theme.typography.font200, {\n    backgroundColor: $striped ? $theme.colors.tableStripedBackground : null,\n    color: $theme.colors.contentPrimary,\n    display: 'flex',\n    flex: 1,\n    paddingTop: $theme.sizing.scale300,\n    paddingRight: $theme.sizing.scale600,\n    paddingBottom: $theme.sizing.scale300,\n    paddingLeft: $theme.sizing.scale600\n  });\n});\nStyledCellElement.displayName = \"StyledCellElement\";\nexport var StyledCell = withWrapper(StyledCellElement, function (StyledComponent) {\n  return function StyledCell(props) {\n    return React.createElement(StyledComponent, _extends({\n      role: \"gridcell\"\n    }, props));\n  };\n});\nexport var StyledFilterButton = styled('button', function (props) {\n  function getIconColor() {\n    if (props.$disabled) {\n      return props.$theme.colors.mono500;\n    }\n\n    if (props.$active) {\n      return props.$theme.colors.contentPrimary;\n    }\n\n    return props.$theme.colors.tableFilter;\n  }\n\n  function getIconHoverColor() {\n    if (props.$disabled || props.$active) {\n      return null;\n    }\n\n    return props.$theme.colors.contentPrimary;\n  }\n\n  return {\n    backgroundColor: 'transparent',\n    borderLeftStyle: 'none',\n    borderTopStyle: 'none',\n    borderRightStyle: 'none',\n    borderBottomStyle: 'none',\n    color: getIconColor(),\n    cursor: props.$disabled ? null : 'pointer',\n    paddingTop: 'none',\n    paddingRight: 'none',\n    paddingBottom: 'none',\n    paddingLeft: 'none',\n    ':hover': {\n      color: getIconHoverColor()\n    }\n  };\n});\nStyledFilterButton.displayName = \"StyledFilterButton\";\nexport var StyledFilterContent = styled('div', function (_ref7) {\n  var $theme = _ref7.$theme;\n  return _objectSpread({}, expandBorderStyles($theme.borders.border300), {\n    backgroundColor: $theme.colors.tableFilterBackground,\n    borderRightStyle: 'none',\n    borderLeftStyle: 'none',\n    maxHeight: '196px',\n    paddingRight: $theme.sizing.scale600,\n    paddingLeft: $theme.sizing.scale600,\n    overflow: 'auto'\n  });\n});\nStyledFilterContent.displayName = \"StyledFilterContent\";\nexport var StyledFilterHeading = styled('div', function (_ref8) {\n  var $theme = _ref8.$theme;\n  return _objectSpread({}, $theme.typography.font250, {\n    color: $theme.colors.tableFilterHeading,\n    paddingTop: $theme.sizing.scale500,\n    paddingRight: $theme.sizing.scale600,\n    paddingBottom: $theme.sizing.scale500,\n    paddingLeft: $theme.sizing.scale600\n  });\n});\nStyledFilterHeading.displayName = \"StyledFilterHeading\";\nexport var StyledFilterFooter = styled('div', function (_ref9) {\n  var $theme = _ref9.$theme;\n  return {\n    backgroundColor: $theme.colors.tableFilterFooterBackground,\n    paddingTop: $theme.sizing.scale300,\n    paddingRight: $theme.sizing.scale100,\n    paddingBottom: $theme.sizing.scale300,\n    paddingLeft: $theme.sizing.scale100,\n    display: 'flex',\n    justifyContent: 'space-between',\n    minWidth: '216px'\n  };\n});\nStyledFilterFooter.displayName = \"StyledFilterFooter\";\nexport var StyledAction = styled('button', function (_ref10) {\n  var $theme = _ref10.$theme;\n  return {\n    backgroundColor: 'transparent',\n    borderLeftStyle: 'none',\n    borderTopStyle: 'none',\n    borderRightStyle: 'none',\n    borderBottomStyle: 'none',\n    color: $theme.colors.primary,\n    paddingTop: 0,\n    paddingRight: 0,\n    paddingBottom: 0,\n    paddingLeft: 0,\n    marginRight: $theme.sizing.scale100,\n    marginLeft: $theme.sizing.scale100,\n    ':hover:enabled': {\n      cursor: 'pointer'\n    }\n  };\n});\nStyledAction.displayName = \"StyledAction\";","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/*\nCopyright (c) 2018-2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\nimport * as React from 'react';\nimport { withStyle, withWrapper } from '../styles/index.js';\nimport { StyledTable as FlexStyledTable, StyledHeadCell as FlexStyledHeadCell, StyledCell as FlexStyledBodyCell } from '../table/index.js';\nvar StyledTableElement = withStyle(FlexStyledTable, function (props) {\n  return {\n    display: 'grid',\n    gridTemplateColumns: props.$gridTemplateColumns,\n    flexDirection: 'unset'\n  };\n});\nStyledTableElement.displayName = \"StyledTableElement\";\nexport var StyledTable = withWrapper(StyledTableElement, function (StyledComponent) {\n  return function StyledTable(props) {\n    return React.createElement(StyledComponent, _extends({\n      \"data-baseweb\": \"table-grid\"\n    }, props));\n  };\n});\nexport var StyledHeadCell = withStyle(FlexStyledHeadCell, function (_ref) {\n  var _ref$$sticky = _ref.$sticky,\n      $sticky = _ref$$sticky === void 0 ? true : _ref$$sticky,\n      $isFocusVisible = _ref.$isFocusVisible,\n      $theme = _ref.$theme;\n  return {\n    backgroundColor: $theme.colors.tableHeadBackgroundColor,\n    boxShadow: $theme.lighting.shadow400,\n    position: $sticky ? 'sticky' : null,\n    top: $sticky ? 0 : null,\n    width: 'unset',\n    ':focus': {\n      outline: $isFocusVisible ? \"3px solid \".concat($theme.colors.accent) : 'none',\n      outlineOffset: '-3px'\n    }\n  };\n});\nStyledHeadCell.displayName = \"StyledHeadCell\";\nexport var StyledBodyCell = withStyle(FlexStyledBodyCell, function (props) {\n  return {\n    display: 'block',\n    flex: 'unset',\n    gridColumn: props.$gridColumn || null,\n    gridRow: props.$gridRow || null,\n    ':focus': {\n      outline: props.$isFocusVisible ? \"3px solid \".concat(props.$theme.colors.accent) : 'none',\n      outlineOffset: '-3px'\n    }\n  };\n});\nStyledBodyCell.displayName = \"StyledBodyCell\";","import { ApolloClient } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport {\n  ApolloContextValue,\n  parser,\n  DocumentType,\n  operationName\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { CommonOptions } from '../types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: ApolloContextValue = {};\n  public client: ApolloClient<object> | undefined;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: ApolloContextValue) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !isEqual(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import {\n  ApolloQueryResult,\n  ApolloError,\n  NetworkStatus,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n  UpdateQueryOptions,\n  SubscribeToMoreOptions,\n} from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  QueryResult,\n  ObservableQueryFields,\n} from '@apollo/react-common';\n\nimport {\n  QueryPreviousData,\n  QueryOptions,\n  QueryCurrentObservable,\n  QueryTuple,\n  QueryLazyOptions,\n} from '../types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData {\n  public onNewData: () => void;\n\n  private previousData: QueryPreviousData<TData, TVariables> = {};\n  private currentObservable: QueryCurrentObservable<TData, TVariables> = {};\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n\n  constructor({\n    options,\n    context,\n    onNewData,\n  }: {\n    options: QueryOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (this.isMounted) this.startQuerySubscription();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined,\n          } as QueryResult<TData, TVariables>,\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<ApolloQueryResult<any>> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n\n    // currentObservable.query is already assigned the registered SSR observable in initializeObservableQuery.\n    const obs = this.currentObservable.query!;\n    const currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables,\n      };\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context,\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteResult = (): QueryResult<TData, TVariables> => {\n    const result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  private getExecuteSsrResult() {\n    const ssrDisabled = this.getOptions().ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    let result;\n    if (this.ssrInitiated()) {\n      result =\n        this.context.renderPromises!.addQueryPromise(\n          this,\n          this.getExecuteResult\n        ) || ssrLoading;\n    }\n\n    return result;\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n      metadata: { reactComponent: { displayName } },\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable.query) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previousData.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null,\n      };\n      this.currentObservable.query = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions,\n      });\n\n      if (this.ssrInitiated()) {\n        this.context?.renderPromises?.registerSSRObservable(\n          this.currentObservable.query,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null,\n    };\n\n    if (\n      !isEqual(\n        newObservableQueryOptions,\n        this.previousData.observableQueryOptions\n      )\n    ) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .query!.setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  private startQuerySubscription() {\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n\n    const obsQuery = this.currentObservable.query!;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previousData.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          isEqual(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        this.onNewData();\n      },\n      error: (error) => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previousData.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !isEqual(error, this.previousData.error)\n        ) {\n          this.previousData.error = error;\n          this.onNewData();\n        }\n      },\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const lastError = this.currentObservable.query!.getLastError();\n    const lastResult = this.currentObservable.query!.getLastResult();\n    this.currentObservable.query!.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query!, {\n      lastError,\n      lastResult,\n    });\n  }\n\n  private getQueryResult(): QueryResult<TData, TVariables> {\n    let result: any = this.observableQueryFields();\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true,\n      };\n    } else {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.query!.getCurrentResult();\n      const { loading, partial, networkStatus, errors } = currentResult;\n      let { error, data } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        loading,\n        networkStatus,\n        error,\n        called: true,\n      };\n\n      if (loading) {\n        const previousData =\n          this.previousData.result && this.previousData.result.data;\n        result.data =\n          previousData && data\n            ? {\n                ...previousData,\n                ...data,\n              }\n            : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query!.getLastResult() || ({} as any))\n            .data,\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.query!.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          !data &&\n          partial &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading,\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading =\n      (this.previousData.result && this.previousData.result.loading) || false;\n    this.previousData.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable.query &&\n      this.currentObservable.query.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    const obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n\n    const { data, loading, error } = this.previousData.result;\n\n    if (!loading) {\n      const { query, variables, onCompleted, onError } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previousData.loading &&\n        isEqual(this.previousOptions.query, query) &&\n        isEqual(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n\n  private obsRefetch = (variables?: TVariables) =>\n    this.currentObservable.query!.refetch(variables);\n\n  private obsFetchMore = <K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable.query!.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable.query!.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable.query!.subscribeToMore(options);\n\n  private observableQueryFields() {\n    const observable = this.currentObservable.query!;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore,\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport {\n  getApolloContext,\n  OperationVariables,\n  QueryResult,\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions, QueryOptions, QueryTuple } from '../types';\nimport { QueryData } from '../data/QueryData';\nimport { useDeepMemo } from './useDeepMemo';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer((x) => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData =\n    queryDataRef.current ||\n    new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask.\n          Promise.resolve().then(forceUpdate);\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      },\n    });\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // SSR won't trigger the effect hook below that stores the current\n  // `QueryData` instance for future renders, so we'll handle that here if\n  // the current render is happening server side.\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: { ...updatedOptions, onError: undefined, onCompleted: undefined },\n    context,\n    tick,\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  useEffect(() => {\n    // We only need one instance of the `QueryData` class, so we'll store it\n    // as a ref to make it available on subsequent renders.\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return () => queryData.cleanup();\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal as isEqual } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !isEqual(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import { OperationVariables, QueryResult } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import { ApolloError } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  OperationVariables,\n  ExecutionResult,\n  MutationFunctionOptions,\n  MutationResult\n} from '@apollo/react-common';\n\nimport { MutationOptions, MutationTuple } from '../types';\nimport { OperationData } from './OperationData';\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData {\n  private mostRecentMutationId: number;\n  private result: MutationResult<TData>;\n  private previousResult?: MutationResult<TData>;\n  private setResult: (result: MutationResult<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    result: MutationResult<TData>;\n    setResult: (result: MutationResult<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResult<TData>) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: ExecutionResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.getOptions().onError) throw error;\n      });\n  };\n\n  private mutate(\n    mutationFunctionOptions: MutationFunctionOptions<TData, TVariables>\n  ) {\n    const {\n      mutation,\n      variables,\n      optimisticResponse,\n      update,\n      context: mutationContext = {},\n      awaitRefetchQueries = false,\n      fetchPolicy\n    } = this.getOptions();\n    const mutateOptions = { ...mutationFunctionOptions };\n\n    const mutateVariables = Object.assign(\n      {},\n      variables,\n      mutateOptions.variables\n    );\n    delete mutateOptions.variables;\n\n    return this.refreshClient().client.mutate({\n      mutation,\n      optimisticResponse,\n      refetchQueries:\n        mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries,\n      update,\n      context: mutationContext,\n      fetchPolicy,\n      variables: mutateVariables,\n      ...mutateOptions\n    });\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: ExecutionResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.getOptions();\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResult<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !isEqual(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { MutationHookOptions, MutationTuple } from './types';\nimport { MutationData } from './data/MutationData';\n\nexport function useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode,\n  options?: MutationHookOptions<TData, TVariables>\n): MutationTuple<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","import { equal as isEqual } from '@wry/equality';\nimport { ApolloContextValue, SubscriptionResult } from '@apollo/react-common';\n\nimport { OperationData } from './OperationData';\nimport { SubscriptionCurrentObservable, SubscriptionOptions } from '../types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !isEqual(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    const { onSubscriptionComplete } = this.getOptions();\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n","import { ObservableQuery } from 'apollo-client';\nimport { QueryOptions } from '../types';\nimport { DocumentNode } from 'graphql';\nimport { QueryData } from '../data/QueryData';\n\ntype QueryInfo = {\n  seen: boolean;\n  observable: ObservableQuery<any, any> | null;\n};\n\nfunction makeDefaultQueryInfo(): QueryInfo {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nexport class RenderPromises {\n  // Map from Query component instances to pending fetchData promises.\n  private queryPromises = new Map<QueryOptions<any, any>, Promise<any>>();\n\n  // Two-layered map from (query document, stringified variables) to QueryInfo\n  // objects. These QueryInfo objects are intended to survive through the whole\n  // getMarkupFromTree process, whereas specific Query instances do not survive\n  // beyond a single call to renderToStaticMarkup.\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\n\n  // Registers the server side rendered observable.\n  public registerSSRObservable<TData, TVariables>(\n    observable: ObservableQuery<any, TVariables>,\n    props: QueryOptions<TData, TVariables>\n  ) {\n    this.lookupQueryInfo(props).observable = observable;\n  }\n\n  // Get's the cached observable that matches the SSR Query instances query and variables.\n  public getSSRObservable<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ) {\n    return this.lookupQueryInfo(props).observable;\n  }\n\n  public addQueryPromise<TData, TVariables>(\n    queryInstance: QueryData<TData, TVariables>,\n    finish: () => React.ReactNode\n  ): React.ReactNode {\n    const info = this.lookupQueryInfo(queryInstance.getOptions());\n    if (!info.seen) {\n      this.queryPromises.set(\n        queryInstance.getOptions(),\n        new Promise(resolve => {\n          resolve(queryInstance.fetchData());\n        })\n      );\n      // Render null to abandon this subtree for this rendering, so that we\n      // can wait for the data to arrive.\n      return null;\n    }\n    return finish();\n  }\n\n  public hasPromises() {\n    return this.queryPromises.size > 0;\n  }\n\n  public consumeAndAwaitPromises() {\n    const promises: Promise<any>[] = [];\n    this.queryPromises.forEach((promise, queryInstance) => {\n      // Make sure we never try to call fetchData for this query document and\n      // these variables again. Since the queryInstance objects change with\n      // every rendering, deduplicating them by query and variables is the\n      // best we can do. If a different Query component happens to have the\n      // same query document and variables, it will be immediately rendered\n      // by calling finish() in addQueryPromise, which could result in the\n      // rendering of an unwanted loading state, but that's not nearly as bad\n      // as getting stuck in an infinite rendering loop because we kept calling\n      // queryInstance.fetchData for the same Query component indefinitely.\n      this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  }\n\n  private lookupQueryInfo<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ): QueryInfo {\n    const { queryInfoTrie } = this;\n    const { query, variables } = props;\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    const variablesString = JSON.stringify(variables);\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  }\n}\n"],"sourceRoot":""}